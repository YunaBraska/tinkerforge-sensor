package berlin.yuna.tinkerforgesensor.model.builder;

import berlin.yuna.tinkerforgesensor.model.exception.NetworkConnectionException;
import berlin.yuna.tinkerforgesensor.model.sensor.Accelerometer;
import berlin.yuna.tinkerforgesensor.model.sensor.AirQuality;
import berlin.yuna.tinkerforgesensor.model.sensor.Barometer;
import berlin.yuna.tinkerforgesensor.model.sensor.ButtonDual;
import berlin.yuna.tinkerforgesensor.model.sensor.ButtonMultiTouch;
import berlin.yuna.tinkerforgesensor.model.sensor.ButtonRGB;
import berlin.yuna.tinkerforgesensor.model.sensor.Compass;
import berlin.yuna.tinkerforgesensor.model.sensor.DC;
import berlin.yuna.tinkerforgesensor.model.sensor.Default;
import berlin.yuna.tinkerforgesensor.model.sensor.DisplayLcd128x64;
import berlin.yuna.tinkerforgesensor.model.sensor.DisplayLcd20x4;
import berlin.yuna.tinkerforgesensor.model.sensor.DisplaySegment;
import berlin.yuna.tinkerforgesensor.model.sensor.DistanceIR;
import berlin.yuna.tinkerforgesensor.model.sensor.DistanceUS;
import berlin.yuna.tinkerforgesensor.model.sensor.Humidity;
import berlin.yuna.tinkerforgesensor.model.sensor.IMU;
import berlin.yuna.tinkerforgesensor.model.sensor.IO16;
import berlin.yuna.tinkerforgesensor.model.sensor.LightAmbient;
import berlin.yuna.tinkerforgesensor.model.sensor.LightColor;
import berlin.yuna.tinkerforgesensor.model.sensor.LightUv;
import berlin.yuna.tinkerforgesensor.model.sensor.LocalAudio;
import berlin.yuna.tinkerforgesensor.model.sensor.LocalControl;
import berlin.yuna.tinkerforgesensor.model.sensor.Master;
import berlin.yuna.tinkerforgesensor.model.sensor.MotionDetector;
import berlin.yuna.tinkerforgesensor.model.sensor.PoiLinearMotor;
import berlin.yuna.tinkerforgesensor.model.sensor.Sensor;
import berlin.yuna.tinkerforgesensor.model.sensor.Servo;
import berlin.yuna.tinkerforgesensor.model.sensor.SoundIntensity;
import berlin.yuna.tinkerforgesensor.model.sensor.SoundPressure;
import berlin.yuna.tinkerforgesensor.model.sensor.Speaker;
import berlin.yuna.tinkerforgesensor.model.sensor.Temperature;
import berlin.yuna.tinkerforgesensor.model.sensor.Tilt;
import java.lang.Class;
import java.lang.RuntimeException;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 * Autogenerated with [GeneratorSensors:generate]
 */
public class SensorsV1 extends CopyOnWriteArrayList<Sensor> {
    public SensorsV1() {
    }

    public SensorsV1(final Collection<? extends Sensor> collection) {
        super(collection);
    }

    public SensorsV1(final Sensor[] toCopyIn) {
        super(toCopyIn);
    }

    public Accelerometer accelerometer() {
        return accelerometer(0);
    }

    public Accelerometer accelerometer(final int number) {
        return (Accelerometer) getSensor(number, Accelerometer.class);
    }

    public AirQuality airQuality() {
        return airQuality(0);
    }

    public AirQuality airQuality(final int number) {
        return (AirQuality) getSensor(number, AirQuality.class);
    }

    public Barometer barometer() {
        return barometer(0);
    }

    public Barometer barometer(final int number) {
        return (Barometer) getSensor(number, Barometer.class);
    }

    public ButtonDual buttonDual() {
        return buttonDual(0);
    }

    public ButtonDual buttonDual(final int number) {
        return (ButtonDual) getSensor(number, ButtonDual.class);
    }

    public ButtonMultiTouch buttonMultiTouch() {
        return buttonMultiTouch(0);
    }

    public ButtonMultiTouch buttonMultiTouch(final int number) {
        return (ButtonMultiTouch) getSensor(number, ButtonMultiTouch.class);
    }

    public ButtonRGB buttonRGB() {
        return buttonRGB(0);
    }

    public ButtonRGB buttonRGB(final int number) {
        return (ButtonRGB) getSensor(number, ButtonRGB.class);
    }

    public Compass compass() {
        return compass(0);
    }

    public Compass compass(final int number) {
        return (Compass) getSensor(number, Compass.class);
    }

    public DC dC() {
        return dC(0);
    }

    public DC dC(final int number) {
        return (DC) getSensor(number, DC.class);
    }

    public DisplayLcd128x64 displayLcd128x64() {
        return displayLcd128x64(0);
    }

    public DisplayLcd128x64 displayLcd128x64(final int number) {
        return (DisplayLcd128x64) getSensor(number, DisplayLcd128x64.class);
    }

    public DisplayLcd20x4 displayLcd20x4() {
        return displayLcd20x4(0);
    }

    public DisplayLcd20x4 displayLcd20x4(final int number) {
        return (DisplayLcd20x4) getSensor(number, DisplayLcd20x4.class);
    }

    public DisplaySegment displaySegment() {
        return displaySegment(0);
    }

    public DisplaySegment displaySegment(final int number) {
        return (DisplaySegment) getSensor(number, DisplaySegment.class);
    }

    public DistanceIR distanceIR() {
        return distanceIR(0);
    }

    public DistanceIR distanceIR(final int number) {
        return (DistanceIR) getSensor(number, DistanceIR.class);
    }

    public DistanceUS distanceUS() {
        return distanceUS(0);
    }

    public DistanceUS distanceUS(final int number) {
        return (DistanceUS) getSensor(number, DistanceUS.class);
    }

    public Humidity humidity() {
        return humidity(0);
    }

    public Humidity humidity(final int number) {
        return (Humidity) getSensor(number, Humidity.class);
    }

    public IMU iMU() {
        return iMU(0);
    }

    public IMU iMU(final int number) {
        return (IMU) getSensor(number, IMU.class);
    }

    public IO16 iO16() {
        return iO16(0);
    }

    public IO16 iO16(final int number) {
        return (IO16) getSensor(number, IO16.class);
    }

    public LightAmbient lightAmbient() {
        return lightAmbient(0);
    }

    public LightAmbient lightAmbient(final int number) {
        return (LightAmbient) getSensor(number, LightAmbient.class);
    }

    public LightColor lightColor() {
        return lightColor(0);
    }

    public LightColor lightColor(final int number) {
        return (LightColor) getSensor(number, LightColor.class);
    }

    public LightUv lightUv() {
        return lightUv(0);
    }

    public LightUv lightUv(final int number) {
        return (LightUv) getSensor(number, LightUv.class);
    }

    public LocalAudio localAudio() {
        return localAudio(0);
    }

    public LocalAudio localAudio(final int number) {
        return (LocalAudio) getSensor(number, LocalAudio.class);
    }

    public LocalControl localControl() {
        return localControl(0);
    }

    public LocalControl localControl(final int number) {
        return (LocalControl) getSensor(number, LocalControl.class);
    }

    public Master master() {
        return master(0);
    }

    public Master master(final int number) {
        return (Master) getSensor(number, Master.class);
    }

    public MotionDetector motionDetector() {
        return motionDetector(0);
    }

    public MotionDetector motionDetector(final int number) {
        return (MotionDetector) getSensor(number, MotionDetector.class);
    }

    public PoiLinearMotor poiLinearMotor() {
        return poiLinearMotor(0);
    }

    public PoiLinearMotor poiLinearMotor(final int number) {
        return (PoiLinearMotor) getSensor(number, PoiLinearMotor.class);
    }

    public Servo servo() {
        return servo(0);
    }

    public Servo servo(final int number) {
        return (Servo) getSensor(number, Servo.class);
    }

    public SoundIntensity soundIntensity() {
        return soundIntensity(0);
    }

    public SoundIntensity soundIntensity(final int number) {
        return (SoundIntensity) getSensor(number, SoundIntensity.class);
    }

    public SoundPressure soundPressure() {
        return soundPressure(0);
    }

    public SoundPressure soundPressure(final int number) {
        return (SoundPressure) getSensor(number, SoundPressure.class);
    }

    public Speaker speaker() {
        return speaker(0);
    }

    public Speaker speaker(final int number) {
        return (Speaker) getSensor(number, Speaker.class);
    }

    public Temperature temperature() {
        return temperature(0);
    }

    public Temperature temperature(final int number) {
        return (Temperature) getSensor(number, Temperature.class);
    }

    public Tilt tilt() {
        return tilt(0);
    }

    public Tilt tilt(final int number) {
        return (Tilt) getSensor(number, Tilt.class);
    }

    private synchronized List<Sensor> getSensor(final Class... sensorClasses) {
        return stream().filter(sensor -> sensor.compare().is(sensorClasses)).sorted(java.util.Comparator.comparingInt(Sensor::port)).collect(java.util.stream.Collectors.toList());
    }

    private synchronized Sensor getSensor(final int number, final Class... sensorClasses) {
        final List<Sensor> sensors = getSensor(sensorClasses);
        return number < sensors.size() ? sensors.get(number) : getDefaultSensor(sensorClasses[0]);
    }

    private Sensor getDefaultSensor(final Class sensorClass) {
        try {
            return new Default(sensorClass);
        } catch (NetworkConnectionException e) {
            throw new RuntimeException("Default device should not run into an exception", e);
        }
    }
}
