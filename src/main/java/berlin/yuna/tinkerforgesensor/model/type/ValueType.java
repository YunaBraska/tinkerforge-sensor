package berlin.yuna.tinkerforgesensor.model.type;

public enum ValueType {
    ALL(null),
    DUMMY(ALL),

    DEVICE_STATUS(ALL),
    DEVICE_CONNECTED(DEVICE_STATUS),
    DEVICE_RECONNECTED(DEVICE_STATUS),
    DEVICE_DISCONNECTED(DEVICE_STATUS),
    EMERGENCY_SHUTDOWN(DEVICE_STATUS),

    ENVIRONMENT(ALL),
    AIR_PRESSURE(ENVIRONMENT),
    IAQ_INDEX(ENVIRONMENT),
    HUMIDITY(ENVIRONMENT),
    TEMPERATURE(ENVIRONMENT),
    ALTITUDE(ENVIRONMENT),
    MOTION_DETECTED_ON(ENVIRONMENT),
    MOTION_DETECTED_OFF(ENVIRONMENT),

    DISTANCE_IR(ALL),
    DISTANCE_IR_ANALOG(ALL),
    DISTANCE_US(ALL),
    DISTANCE_US_AVERAGE(ALL),

    SOUND(ALL),
    SOUND_DECIBEL(SOUND),
    SOUND_SPECTRUM_LENGTH(SOUND),
    SOUND_SPECTRUM_OFFSET(SOUND),
    SOUND_INTENSITY(SOUND),

    TOUCH(ALL),
    TOUCH_1(TOUCH),
    TOUCH_2(TOUCH),
    TOUCH_3(TOUCH),
    TOUCH_4(TOUCH),
    TOUCH_5(TOUCH),
    TOUCH_6(TOUCH),
    TOUCH_7(TOUCH),
    TOUCH_8(TOUCH),
    TOUCH_9(TOUCH),
    TOUCH_10(TOUCH),
    TOUCH_11(TOUCH),
    TOUCH_12(TOUCH),
    TOUCH_PROXIMITY(TOUCH),

    LIGHT(ALL),
    LIGHT_UV(LIGHT),
    LIGHT_LUX(LIGHT),
    LIGHT_LUX_ANALOG(LIGHT),

    COLOR(ALL),
    COLOR_R(COLOR),
    COLOR_G(COLOR),
    COLOR_B(COLOR),
    COLOR_C(COLOR),
    COLOR_RGB(COLOR),
    COLOR_LUX(COLOR),
    COLOR_TEMPERATURE(COLOR),

    IMU(ALL),
    CALIBRATION(IMU),
    ORIENTATION_HEADING(IMU),
    ORIENTATION_ROLL(IMU),
    ORIENTATION_PITCH(IMU),
    ACCELERATION_X(IMU),
    ACCELERATION_Y(IMU),
    ACCELERATION_Z(IMU),
    MAGNETIC_X(IMU),
    MAGNETIC_Y(IMU),
    MAGNETIC_Z(IMU),
    ANGULAR_VELOCITY_X(IMU),
    ANGULAR_VELOCITY_Y(IMU),
    ANGULAR_VELOCITY_Z(IMU),
    EULER_ANGLE_X(IMU),
    EULER_ANGLE_Y(IMU),
    EULER_ANGLE_Z(IMU),
    QUATERNION_W(IMU),
    QUATERNION_X(IMU),
    QUATERNION_Y(IMU),
    QUATERNION_Z(IMU),
    LINEAR_ACCELERATION_X(IMU),
    LINEAR_ACCELERATION_Y(IMU),
    LINEAR_ACCELERATION_Z(IMU),
    GRAVITY_VECTOR_X(IMU),
    GRAVITY_VECTOR_Y(IMU),
    GRAVITY_VECTOR_Z(IMU),

    ENERGY(ALL),
    POWER(ALL),
    VOLTAGE_USB(ENERGY),
    VOLTAGE(ENERGY),
    CURRENT(ENERGY),

//    CURRENT_STACK(ALL),
//    VOLTAGE_STACK(ALL),
//    VOLTAGE_STACK_USB_VOLTAGE(ALL),

    BUTTON(ALL),
    BUTTON_PRESSED(BUTTON),
    BUTTON_RELEASED(BUTTON),
    ;

    public final ValueType parent;

    public boolean is(final ValueType valueType){
        return this == valueType;
    }

    ValueType(ValueType parent) {
        this.parent = parent;
    }
}
